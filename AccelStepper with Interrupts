#include <AccelStepper.h>

#define directionPinX GPIO_NUM_27
#define stepPinX GPIO_NUM_26
#define directionPinY GPIO_NUM_12
#define stepPinY GPIO_NUM_14
#define limitSwitch1 GPIO_NUM_16
#define limitSwitch2 GPIO_NUM_17

AccelStepper stepperX(AccelStepper::DRIVER, stepPinX, directionPinX);
AccelStepper stepperY(AccelStepper::DRIVER, stepPinY, directionPinY);

bool xHomed = false;
bool yMoved = false;
bool complete = false;

volatile bool limitSwitch1Pressed = false;
volatile bool limitSwitch2Pressed = false;

void setup(){
  pinMode(limitSwitch1, INPUT_PULLUP);
  pinMode(limitSwitch2, INPUT_PULLUP);

  //Values for Gantry Motor
  stepperX.setMaxSpeed(1000);
  stepperX.setAcceleration(500);
  stepperX.setSpeed(500);

   //Values for Manipulator Motor
  stepperY.setMaxSpeed(1000);
  stepperY.setAcceleration(500);
  stepperY.setSpeed(500);

  //interrupts
  attachInterrupt(digitalPinToInterrupt(limitSwitch1), limitSwitch1ISR, CHANGE);
  attachInterrupt(digitalPinToInterrupt(limitSwitch2), limitSwitch2ISR, CHANGE);
}

void loop(){
  //homing sequence
  if(!xHomed){
    stepperX.move(1000); //move some distance towards the manipulator
    stepperX.run();
    if(limitSwitch1Pressed){  //when switch is pressed stop the motor
      stepperX.stop();
      xHomed = true;  //set homing variable true
      limitSwitch1Pressed = false; 
    }
  }
  else if(!yMoved){
    delay(2000);  //wait two seconds after limitswitch 1 is pressed
    stepperY.moveTo(25); //rotate manipulator 45 degrees
    stepperY.run();
    if(stepperY.distanceToGo() == 0){ //when 45 degrees reach, stop rotating
      stepperY.stop();
      yMoved = true;
    }
  }
  else{
    if(!complete){  //slightly move the gantry away from the pressed limit switch
      stepperX.moveTo(-100);
      stepperX.run();
      if(stepperY.distanceToGo() == 0){
        stepperX.stop();
        complete = true;
      }
    }
  }
}

void limitSwitch1ISR() {
  delay(20);
  if(digitalRead(limitSwitch1) == LOW){ //debouncing
     limitSwitch1Pressed = true;
  }
}

void limitSwitch2ISR() {
  delay(20);
  if(digitalRead(limitSwitch2) == LOW){ //debouncing
     limitSwitch2Pressed = true;
  }
}
